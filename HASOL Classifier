{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"HASOL Classifier","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"UUgqXg3dmefo","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import matplotlib as plt\n","from sklearn.model_selection import train_test_split\n","import numpy as np\n","import time"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z2H42XA3uPLa","colab_type":"code","colab":{}},"source":["from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.wrappers.scikit_learn import KerasClassifier\n","from keras.utils import np_utils\n","from sklearn.model_selection import cross_val_score\n","from sklearn.model_selection import KFold\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","import tensorflow as tf\n","from sklearn.pipeline import Pipeline\n","from keras import Model\n","#!pip install -U -q keras_pandas"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TTlzRKyJQsxW","colab_type":"code","colab":{}},"source":["from sklearn.metrics import auc\n","from sklearn.metrics import f1_score\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import roc_curve,roc_auc_score,precision_recall_curve\n","from matplotlib import pyplot as plt\n","from matplotlib import pylab"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7gwXgIMFpaAT","colab_type":"code","colab":{}},"source":["!pip install -U -q PyDrive\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials\n","# Authenticate and create the PyDrive client.\n","auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R5Cfe2XtprzX","colab_type":"code","colab":{}},"source":["link='https://drive.google.com/open?id=1Gp5d1yv8jaTMmTnCWgAnxzGvoBLc5ppu'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QEK_tTCypsrX","colab_type":"code","colab":{}},"source":["fluff, id = link.split('=')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0J9Vk4snpu5J","colab_type":"code","colab":{}},"source":["downloaded = drive.CreateFile({'id':id}) \n","downloaded.GetContentFile('labeled_data.csv')  \n","df = pd.read_csv('labeled_data.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YvYJHggmTtTT","colab_type":"text"},"source":["## **Quick Analysis**"]},{"cell_type":"code","metadata":{"id":"KYecxY4nTwRE","colab_type":"code","colab":{}},"source":["df.groupby('class').count()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZPkftLEJgRiQ","colab_type":"text"},"source":["### **Cleaning**"]},{"cell_type":"code","metadata":{"id":"CeIBg3VswdVG","colab_type":"code","colab":{}},"source":["df=df.drop(labels=['Unnamed: 0','count','hate_speech','offensive_language','neither'],axis=1)\n","dfc=df"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gqcNmKslyE2d","colab_type":"code","colab":{}},"source":["import nltk\n","from nltk import word_tokenize\n","from nltk import WordNetLemmatizer\n","nltk.download('stopwords')\n","nltk.download('punkt')\n","nltk.download('wordnet')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"t6BaLPHEybge","colab_type":"code","colab":{}},"source":["from nltk.corpus import stopwords\n","stop = stopwords.words('english')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DMY_Z5ML9Fzr","colab_type":"code","colab":{}},"source":["#negative result\n","\n","lemmatizer = nltk.stem.WordNetLemmatizer()\n","\n","def lemmatize_text(text):\n","    return [lemmatizer.lemmatize(w) for w in text]\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"T4xRvEPRwDzD","colab_type":"code","colab":{}},"source":["remove=['RT','!']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"S7xo0b5_ru9R","colab_type":"code","colab":{}},"source":["dfc['tweet_tokens'] = dfc.apply(lambda row: nltk.word_tokenize(row['tweet']), axis=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4O7YR3hJyq6g","colab_type":"code","colab":{}},"source":["dfc['tweet_tokens']=dfc['tweet_tokens'].apply(lambda x: [item for item in x if item not in stop])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"P-CBhPYPySDx","colab":{}},"source":["dfc['tweet_tokens']=dfc['tweet_tokens'].apply(lambda x: [item for item in x if item not in remove])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"75Hw6QXc9ZKw","colab_type":"code","colab":{}},"source":["#dfc['tweet_tokens'] = df['tweet_tokens'].apply(lemmatize_text)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SIvYgh0JrD7t","colab_type":"code","colab":{}},"source":["dfc['tweet']=dfc['tweet_tokens'].apply(' '.join)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"P7EKs3NywTb2","colab_type":"code","colab":{}},"source":["dfc.head(5)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kTyB0jvLVU8P","colab_type":"code","colab":{}},"source":["df.head(5)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3K1BXV-c2xzR","colab_type":"code","colab":{}},"source":["dfc=dfc.drop(labels=['tweet_tokens'],axis=1)\n","df=df.drop(labels=['tweet_tokens'],axis=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"34HkXz22yTfp","colab":{}},"source":["df['tweet']= df['tweet'].astype('str')\n","df['class']=df['class'].astype('category')\n","dfc['tweet']=dfc['tweet'].astype('str')\n","dfc['class']=dfc['class'].astype('category')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"I7T_BM55WkC_","colab_type":"code","colab":{}},"source":["st = np.random.RandomState(1)\n","msk=st.rand(len(df))<.8"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"L8VTCExuv6o-","colab_type":"code","colab":{}},"source":["train = df[msk]\n","test = df[~msk]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZPJ98Oh_uFqH","colab_type":"code","colab":{}},"source":["trainc = dfc[msk]\n","testc = dfc[~msk]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"84a6roQ6TAJF","colab_type":"code","colab":{}},"source":["train=train.sample(frac=1).reset_index(drop=True)\n","test = test.sample(frac=1).reset_index(drop=True)\n","trainc=trainc.sample(frac=1).reset_index(drop=True)\n","testc = testc.sample(frac=1).reset_index(drop=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"h8X-deNvaOSk","colab_type":"code","colab":{}},"source":["train.head()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XYI4k15lYivG","colab_type":"code","colab":{}},"source":["vectorizer = TfidfVectorizer()\n","vectors_train=vectorizer.fit_transform(train['tweet'])\n","vectors_test=vectorizer.transform(test['tweet'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mmJkF4s7zQQe","colab_type":"code","colab":{}},"source":["vectors_trainc=vectorizer.fit_transform(trainc['tweet'])\n","vectors_testc=vectorizer.transform(testc['tweet'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_xnIkdK8mpEa","colab_type":"code","colab":{}},"source":["vectors_all=vectorizer.fit_transform(dfc['tweet'])\n","vectors_all=vectorizer.transform(dfc['tweet'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7CzCyfmqXKR-","colab_type":"code","colab":{}},"source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import roc_auc_score\n","from numpy import interp\n","from cycler import cycler\n","from sklearn.preprocessing import LabelBinarizer\n","from sklearn.preprocessing import label_binarize\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import GradientBoostingClassifier\n","from sklearn.ensemble import BaggingClassifier\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.svm import SVC\n","from sklearn.svm import LinearSVC\n","from sklearn.linear_model import SGDClassifier"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DNtRe_cOlNL4","colab_type":"code","colab":{}},"source":["def multiclass_roc_auc_score(y_test, y_pred, average=\"macro\"):\n","  lb = LabelBinarizer()\n","  lb.fit(y_test)\n","  y_test = lb.transform(y_test)\n","  y_pred = lb.transform(y_pred)\n","  return roc_auc_score(y_test, y_pred, average=average)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OCV8HFwymoBO","colab_type":"code","colab":{}},"source":["def multiclass_roc_curve(y_test, y_pred, average=\"macro\"):\n","  y_test = label_binarize(y_test, classes=[0, 1, 2])\n","  y_pred = label_binarize(y_pred, classes=[0, 1, 2])\n","  n_classes=3\n","  # Compute ROC curve and ROC area for each class\n","  fpr = dict()\n","  tpr = dict()\n","  roc_auc = dict()\n","  for i in range(n_classes):\n","    fpr[i], tpr[i], _ = roc_curve(y_test[:, i], y_pred[:, i])\n","    roc_auc[i] = auc(fpr[i], tpr[i])\n","\n","  # Compute micro-average ROC curve and ROC area\n","  fpr[\"micro\"], tpr[\"micro\"], _ = roc_curve(y_test.ravel(), y_pred.ravel())\n","  roc_auc[\"micro\"] = auc(fpr[\"micro\"], tpr[\"micro\"])\n","  \n","  # First aggregate all false positive rates\n","  all_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))\n","\n","  # Then interpolate all ROC curves at this points\n","  mean_tpr = np.zeros_like(all_fpr)\n","  for i in range(n_classes):\n","    mean_tpr += interp(all_fpr, fpr[i], tpr[i])\n","\n","  # Finally average it and compute AUC\n","  mean_tpr /= n_classes\n","\n","  fpr[\"macro\"] = all_fpr\n","  tpr[\"macro\"] = mean_tpr\n","  roc_auc[\"macro\"] = auc(fpr[\"macro\"], tpr[\"macro\"])\n","  \n","  lw=2\n","  plt.figure(figsize=(14,10))\n","  plt.plot([0, 1], [0, 1], 'k--', lw=lw)\n","  plt.xlim([0.0, 1.0])\n","  plt.ylim([0.0, 1.05])\n","  \n","  \n","  # Plot all ROC curves\n","  \n","  plt.plot(fpr[\"micro\"], tpr[\"micro\"],\n","         label='micro-average ROC curve (area = {0:0.2f})'\n","               ''.format(roc_auc[\"micro\"]),\n","         color='deeppink', linestyle=':', linewidth=4)\n","\n","  plt.plot(fpr[\"macro\"], tpr[\"macro\"],\n","         label='macro-average ROC curve (area = {0:0.2f})'\n","               ''.format(roc_auc[\"macro\"]),\n","         color='navy', linestyle=':', linewidth=4)\n","\n","  colors = ['aqua', 'darkorange', 'cornflowerblue']\n","  for i, color in zip(range(n_classes), colors):\n","    plt.plot(fpr[i], tpr[i], color=color, lw=lw,\n","             label='ROC curve of class {0} (area = {1:0.2f})'\n","             ''.format(i, roc_auc[i]))\n","    \n","  plt.xlabel('False Positive Rate')\n","  plt.ylabel('True Positive Rate')\n","  plt.title('Some extension of Receiver operating characteristic to multi-class')\n","  plt.legend(loc=\"lower right\")\n","\n","  plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"z71H5phwZ2Y0","colab_type":"text"},"source":["### **KNN**"]},{"cell_type":"code","metadata":{"id":"hs6KWzOJXL5v","colab_type":"code","colab":{}},"source":["#Bare Tweet\n","KNN=KNeighborsClassifier(n_neighbors=5)\n","KNN.fit(vectors_train,train['class'])\n","#(accuracy_score(KNN.predict(vectors_test),test['class']))\n","(print(classification_report(KNN.predict(vectors_test),test['class'])))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vo09VIz9uNQh","colab_type":"code","colab":{}},"source":["t0=time.time()\n","#Cleaned\n","KNN=KNeighborsClassifier(n_neighbors=5)\n","KNN.fit(vectors_trainc,trainc['class'])\n","#(accuracy_score(KNN.predict(vectors_testc),testc['class']))\n","(print(classification_report(KNN.predict(vectors_testc),testc['class'])))\n","t1=time.time()\n","total = t1-t0\n","print(total)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BLYRI1jzy_rx","colab_type":"code","colab":{}},"source":[" multiclass_roc_auc_score(KNN.predict(vectors_testc),testc['class'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VWPcVbr2zCAj","colab_type":"code","colab":{}},"source":[" multiclass_roc_curve(KNN.predict(vectors_testc),testc['class'])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BGUSpnYPIuun","colab_type":"text"},"source":["### **Random Forest**"]},{"cell_type":"code","metadata":{"id":"Jy0W3IfDIyE3","colab_type":"code","colab":{}},"source":["t0=time.time()\n","#bare tweet\n","rf = RandomForestClassifier(n_estimators= 30 , oob_score=True, max_depth=3)\n","rf.fit(vectors_trainc,trainc['class'])\n","#(accuracy_score(rf.predict(vectors_testc),testc['class']))\n","(print(classification_report(rf.predict(vectors_testc),testc['class'])))\n","t1=time.time()\n","total = t1-t0\n","print(total)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kkvMIeDhykO4","colab_type":"code","colab":{}},"source":[" multiclass_roc_curve(rf.predict(vectors_testc),testc['class'])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1m9Ra-NscVR6","colab_type":"text"},"source":["### **ADA Boosted Decision Tree**"]},{"cell_type":"code","metadata":{"id":"UEomMMkKck7a","colab_type":"code","colab":{}},"source":["#Bare Tweet\n","abc = AdaBoostClassifier(DecisionTreeClassifier(), n_estimators=40)\n","abc.fit(vectors_train,train['class'])\n","#(accuracy_score(abc.predict(vectors_test),test['class']))\n","#print(confusion_matrix(bc.predict(test_df.drop('target',axis=1)),test_df['target']))\n","(print(classification_report(abc.predict(vectors_test),test['class'])))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CDLAZ09xuTCj","colab_type":"code","colab":{}},"source":["t0=time.time()\n","#cleaned\n","abc = AdaBoostClassifier(DecisionTreeClassifier(), n_estimators=40)\n","abc.fit(vectors_trainc,trainc['class'])\n","#(accuracy_score(abc.predict(vectors_testc),testc['class']))\n","#print(confusion_matrix(bc.predict(test_df.drop('target',axis=1)),test_df['target']))\n","(print(classification_report(abc.predict(vectors_testc),testc['class'])))\n","t1=time.time()\n","total = t1-t0\n","print(total)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"K4izecybxfHC","colab_type":"code","colab":{}},"source":[" multiclass_roc_auc_score(abc.predict(vectors_testc),testc['class'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tW_W-ydBkU26","colab_type":"code","colab":{}},"source":[" multiclass_roc_curve(abc.predict(vectors_testc),testc['class'])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5dV-TrJ9Ul-b","colab_type":"text"},"source":["### **SGDC Linear SVM(Contended for the Best)**"]},{"cell_type":"code","metadata":{"id":"gsr3NgWwUouP","colab_type":"code","colab":{}},"source":["t0=time.time()\n","SGDC=SGDClassifier(loss='hinge',max_iter=100)\n","SGDC.fit(vectors_trainc,trainc['class'])\n","#(accuracy_score(SGDC.predict(vectors_testc),testc['class']))\n","(print(classification_report(SGDC.predict(vectors_testc),testc['class'])))\n","t1=time.time()\n","total = t1-t0\n","print(total)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hhvjSsBtkc3R","colab_type":"code","colab":{}},"source":[" multiclass_roc_auc_score(SGDC.predict(vectors_testc),testc['class'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kmtvp2eUmPsX","colab_type":"code","colab":{}},"source":[" multiclass_roc_curve(SGDC.predict(vectors_testc),testc['class'])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-6_FvjwYhtzj","colab_type":"text"},"source":["\n","\n","1.   Fastest algorithm because the base is a linear SVM\n","2.   Combines high precision and recall\n","3.   Best if precision is most important, does well on recall\n","\n"]},{"cell_type":"markdown","metadata":{"id":"3VkxS5Tf5wKS","colab_type":"text"},"source":["### **SVC**"]},{"cell_type":"code","metadata":{"id":"6jbrxMOG5dq9","colab_type":"code","colab":{}},"source":["#bare tweet\n","svc=SVC(probability=True, kernel='linear')\n","svc.fit(vectors_train,train['class'])\n","#(accuracy_score(svc.predict(vectors_test),test['class']))\n","(print(classification_report(svc.predict(vectors_test),test['class'])))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PobPi5x-vCZX","colab_type":"code","colab":{}},"source":["t0=time.time()\n","#cleaned\n","#one vs one\n","svc=SVC(probability=True, kernel='linear')\n","svc.fit(vectors_trainc,trainc['class'])\n","#(accuracy_score(svc.predict(vectors_testc),testc['class']))\n","(print(classification_report(svc.predict(vectors_testc),testc['class'])))\n","t1=time.time()\n","total = t1-t0\n","print(total)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kcrEvIYiVtJp","colab_type":"code","colab":{}},"source":["#cleaned\n","#weight classes\n","svc=SVC(probability=True, kernel='linear',class_weight={0:30,1:20,2:10})\n","svc.fit(vectors_trainc,trainc['class'])\n","#(accuracy_score(svc.predict(vectors_testc),testc['class']))\n","(print(classification_report(svc.predict(vectors_testc),testc['class'])))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"avjuJ48LMqn-","colab_type":"code","colab":{}},"source":["#cleaned\n","#on vs rest\n","#pure linear: very very fast comparitively, Minimal performance impact, scalable\n","lin_svc=LinearSVC(multi_class='crammer_singer')\n","lin_svc.fit(vectors_trainc,trainc['class'])\n","#(accuracy_score(svc.predict(vectors_testc),testc['class']))\n","(print(classification_report(lin_svc.predict(vectors_testc),testc['class'])))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kdzd2A4ZSBOe","colab_type":"code","colab":{}},"source":["#RBF worse\n","svc=SVC(probability=True, kernel='rbf')\n","svc.fit(vectors_trainc,trainc['class'])\n","#(accuracy_score(svc.predict(vectors_testc),testc['class']))\n","(print(classification_report(svc.predict(vectors_testc),testc['class'])))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2b9jT0oUShgK","colab_type":"code","colab":{}},"source":["#polynomial preforms worse\n","#cleaned\n","svc=SVC(probability=True, degree=3)\n","svc.fit(vectors_trainc,trainc['class'])\n","#(accuracy_score(svc.predict(vectors_testc),testc['class']))\n","(print(classification_report(svc.predict(vectors_testc),testc['class'])))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PRnj9RwG1aH5","colab_type":"code","colab":{}},"source":["#bagged\n","#cleaned\n","svc=SVC(probability=True, kernel='linear')\n","bc = BaggingClassifier(svc, n_estimators=40,max_features=5)\n","bc.fit(vectors_trainc,trainc['class'])\n","(accuracy_score(bc.predict(vectors_testc),testc['class']))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NgMMTJk7_Di4","colab_type":"code","colab":{}},"source":["#Not any better\n","#standard SVM needs all night to run, not practical\n","lin_svc=LinearSVC(multi_class='crammer_singer')\n","abc = AdaBoostClassifier(base_estimator=lin_svc, n_estimators=1000,algorithm='SAMME')\n","abc.fit(vectors_trainc,trainc['class'])\n","#(accuracy_score(abc.predict(vectors_test),test['class']))\n","(print(classification_report(abc.predict(vectors_testc),testc['class'])))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QV4twaEtwB_q","colab_type":"text"},"source":["### **Gradient Boosted Decision Tree**"]},{"cell_type":"code","metadata":{"id":"s40A1ypXwgpk","colab_type":"code","colab":{}},"source":["gbc = GradientBoostingClassifier(max_features=100)\n","gbc.fit(vectors_train,train['class'])\n","(accuracy_score(gbc.predict(vectors_test),test['class']))\n","#print(confusion_matrix(gbc.predict(vectors_test,test['class'])))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xZ43U9Uz4gqe","colab_type":"code","colab":{}},"source":["gbc = GradientBoostingClassifier(max_features=100)\n","gbc.fit(vectors_trainc,trainc['class'])\n","(accuracy_score(gbc.predict(vectors_testc),testc['class']))\n","#print(confusion_matrix(gbc.predict(vectors_test,test['class'])))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bi7Ew2cbVVwy","colab_type":"text"},"source":["### **Prep for basic nueral net**"]},{"cell_type":"code","metadata":{"id":"focz8274zRHE","colab_type":"code","colab":{}},"source":["from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Flatten, Embedding, LSTM, GRU, Input,Bidirectional\n","from keras.layers import Conv2D, MaxPooling2D, Conv1D,MaxPooling1D\n","from keras import backend as k\n","from keras.preprocessing.text import Tokenizer, hashing_trick\n","from keras.preprocessing.sequence import pad_sequences"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OOZAMIrNJFeS","colab_type":"code","colab":{}},"source":["!pip install -q pyyaml h5py"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"smKZKn3ly3rw","colab_type":"code","colab":{}},"source":["device_name = tf.test.gpu_device_name()\n","if device_name != '/device:GPU:0':\n","  raise SystemError('GPU device not found')\n","print('Found GPU at: {}'.format(device_name))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xLAHBXNT1n1S","colab_type":"code","colab":{}},"source":["from keras import backend as K\n","\n","def recall_m(y_true, y_pred):\n","        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n","        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n","        recall = true_positives / (possible_positives + K.epsilon())\n","        return recall\n","\n","def precision_m(y_true, y_pred):\n","        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n","        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n","        precision = true_positives / (predicted_positives + K.epsilon())\n","        return precision\n","\n","def f1_m(y_true, y_pred):\n","    precision = precision_m(y_true, y_pred)\n","    recall = recall_m(y_true, y_pred)\n","    return 2*((precision*recall)/(precision+recall+K.epsilon()))\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"v4U5P80nBQ94","colab_type":"text"},"source":["### **CNN**"]},{"cell_type":"code","metadata":{"id":"9WZudVm-ywJ7","colab_type":"code","colab":{}},"source":["#Designate cleaned or bare\n","train, test = train_test_split(dfc[['tweet','class']])\n","#n_outputs\n","tokenizer = Tokenizer(num_words=2000)\n","tokenizer.fit_on_texts(train.tweet.values)\n","train_X = pad_sequences(tokenizer.texts_to_sequences(train.tweet.values), 33)\n","test_X = pad_sequences(tokenizer.texts_to_sequences(test.tweet.values),33)\n","train_Y=tf.keras.utils.to_categorical(train['class'], num_classes=3)\n","test_Y=tf.keras.utils.to_categorical(test['class'], num_classes=3)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZvetWx-gzETn","colab_type":"code","colab":{}},"source":["embed_dim = 128\n","lstm_out = 196\n","max_features = 2000\n","model = Sequential()\n","model.add(Embedding(tokenizer.num_words, tokenizer.num_words, input_length=33))\n","model.add(Conv1D(66, kernel_size=3, activation='relu'))\n","model.add(Conv1D(66, kernel_size=3, activation='relu'))\n","model.add(MaxPooling1D(pool_size=2))\n","model.add(Dropout(.5))\n","model.add(Conv1D(33, kernel_size=3, activation='relu'))\n","model.add(MaxPooling1D(pool_size=2))\n","model.add(Flatten())\n","model.add(Dropout(.5))\n","model.add(Dense(3,activation='softmax'))\n","model.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy',f1_m,precision_m, recall_m])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9i8-T5yuzIw2","colab_type":"code","colab":{}},"source":["batch_size = 32\n","model.fit( train_X,#.reshape((train_X.shape[0], train_X.shape[1],1)), \n","           train_Y,\n","           epochs = 10, \n","           batch_size=batch_size, \n","           verbose = 1, \n","           validation_data=(test_X, test_Y))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZLY63gNv285s","colab_type":"code","colab":{}},"source":["best=model.predict_classes(test_X, verbose=1)\n","multiclass_roc_auc_score(best,test['class'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lx6TJ2cyN-Si","colab_type":"code","colab":{}},"source":[" multiclass_roc_curve(best,test['class'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"AVofBX1DjbUh","colab_type":"code","colab":{}},"source":["(print(classification_report(best,test['class'])))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ut8YHXKFDsfW","colab_type":"text"},"source":["**LSTM RNN**"]},{"cell_type":"code","metadata":{"id":"B_Vl0CLTBLT8","colab_type":"code","colab":{}},"source":["#Designate cleaned or bare\n","train, test = train_test_split(dfc[['tweet','class']],test_size=.20)\n","#n_outputs\n","tokenizer = Tokenizer(num_words=2000)\n","tokenizer.fit_on_texts(train.tweet.values)\n","train_X = pad_sequences(tokenizer.texts_to_sequences(train.tweet.values), 64)\n","test_X = pad_sequences(tokenizer.texts_to_sequences(test.tweet.values),64)\n","train_Y=tf.keras.utils.to_categorical(train['class'], num_classes=3)\n","test_Y=tf.keras.utils.to_categorical(test['class'], num_classes=3)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HjOH8pLTjzan","colab_type":"code","colab":{}},"source":["embed_dim = 128\n","lstm_out = 196\n","max_features = 2000\n","model = Sequential()\n","model.add(Embedding(tokenizer.num_words,64))\n","model.add(Bidirectional(LSTM(64)))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(3, activation='sigmoid'))\n","model.compile(loss='binary_crossentropy',\n","              optimizer='adam',\n","              metrics=['accuracy',f1_m,precision_m, recall_m])\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MeEvnYnwQue-","colab_type":"code","colab":{}},"source":["batch_size = 32\n","model.fit( train_X,#.reshape((train_X.shape[0], train_X.shape[1],1)), \n","          train_Y,\n","          epochs = 10, \n","          batch_size=batch_size, \n","          verbose = 1, \n","          validation_data=(test_X, test_Y))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JlxnO7AdgQnb","colab_type":"code","colab":{}},"source":["best=model.predict_classes(test_X, verbose=1)\n","multiclass_roc_auc_score(best,test['class'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"11puyiP_eDv8","colab_type":"code","colab":{}},"source":[" multiclass_roc_curve(best,test['class'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aXtLeBEbi63o","colab_type":"code","colab":{}},"source":["(print(classification_report(best,test['class'])))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fS1lbIVkJiAh","colab_type":"code","colab":{}},"source":["3Never implemented\n","\n","\n","# Create a basic model instance\n","model_fresh = create_model()\n","\n","# Evaluate the model\n","loss, acc = model_fresh.evaluate(test_images,  test_labels, verbose=2)\n","print(\"Untrained model, accuracy: {:5.2f}%\".format(100*acc))\n","\n","# Loads the weights\n","model.load_weights(checkpoint_path)\n","\n","# Re-evaluate the model\n","loss,acc = model.evaluate(test_images,  test_labels, verbose=2)\n","print(\"Restored model, accuracy: {:5.2f}%\".format(100*acc))"],"execution_count":0,"outputs":[]}]}